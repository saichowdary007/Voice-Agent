{
  "fix_1_protocol_handshake": {
    "description": "WebSocket accepts any protocol to avoid 1011 handshake failures",
    "checks": {
      "# FIX #1: Accept any protocol to avoid 1011 handshake failures": true,
      "await websocket.accept(subprotocol=client_protocol.split(',')[0].strip() if client_protocol else None)": true
    },
    "old_protocol_removed": true,
    "passed": true
  },
  "fix_2_ping_timeout": {
    "description": "Ping timeout disabled to prevent 1011 errors during processing",
    "checks": {
      "# FIX #2: Disable ping timeouts to prevent 1011 errors during processing": true,
      "ws_ping_interval=None": true,
      "ws_ping_timeout=None": true,
      "ws_max_size=2 * 1024 * 1024": true
    },
    "passed": true
  },
  "fix_3_audio_format": {
    "description": "Audio format configured as 16kHz mono WebM/Opus with 250ms chunks",
    "frontend_checks": {
      "sampleRate: 16000": true,
      "channelCount: 1": true,
      "audio/webm;codecs=opus": true,
      "start(250)": true
    },
    "websocket_checks": {
      "// FIX #1: Use \"binary\" protocol to match backend expectations": true,
      "new WebSocket(wsUrl, \"binary\")": true
    },
    "passed": true
  },
  "fix_4_ffmpeg_streaming": {
    "description": "Persistent ffmpeg process eliminates CPU spike from spawning new processes",
    "implementation_checks": {
      "# FIX #4: Single persistent ffmpeg process for WebM/Opus to 16kHz mono PCM": true,
      "'-fflags', '+nobuffer'": true,
      "'-flags', 'low_delay'": true,
      "self.ffmpeg_process: Optional[subprocess.Popen] = None": true,
      "async def initialize_streaming_ffmpeg": true,
      "\u2705 FIX #4: Persistent streaming ffmpeg process initialized": true
    },
    "ffmpeg_available": true,
    "passed": true
  },
  "fix_5_vad_reset_loop": {
    "description": "VAD reset loop eliminated - only reset on WebSocket close",
    "handler_checks": {
      "# FIX #5: Reset state after processing but DON'T reset VAD/STT per chunk": true,
      "# FIX #5: Remove per-chunk VAD/STT resets to prevent init\u2192silence\u2192reset loop": true
    },
    "server_checks": {
      "# FIX #5: Reset VAD and STT state when WebSocket closes (not per chunk)": true,
      "\ud83d\udd04 VAD state reset for disconnected user": true
    },
    "per_chunk_resets_removed": true,
    "vad_reset_count": 0,
    "stt_reset_count": 0,
    "passed": true
  }
}